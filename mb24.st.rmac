; Copyright 2024 Jean-Baptiste M. "JBQ" "Djaybee" Queru
;
; This program is free software: you can redistribute it and/or modify
; it under the terms of the GNU Affero General Public License as
; published by the Free Software Foundation, either version 3 of the
; License, or (at your option) any later version.
;
; As an added restriction, if you make the program available for
; third parties to use on hardware you own (or co-own, lease, rent,
; or otherwise control,) such as public gaming cabinets (whether or
; not in a gaming arcade, whether or not coin-operated or otherwise
; for a fee,) the conditions of section 13 will apply even if no
; network is involved.
;
; This program is distributed in the hope that it will be useful,
; but WITHOUT ANY WARRANTY; without even the implied warranty of
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
; GNU Affero General Public License for more details.
;
; You should have received a copy of the GNU Affero General Public License
; along with this program. If not, see <https://www.gnu.org/licenses/>.
;
; SPDX-License-Identifier: AGPL-3.0-or-later

; Coding style:
;	- ASCII
;	- hard tabs, 8 characters wide, except in ASCII art
;	- 120 columns overall
;	- Standalone block comments in the first 80 columns
;	- Code-related block comments allowed in the last 80 columns
;	- Note: rulers at 40, 80 and 120 columns help with source width
;
;	- Assembler directives are .lowercase
;	- Mnemomics and registers are lowercase unless otherwise required
;	- Global symbols for code are CamelCase
;	- Symbols for variables are snake_case
;	- Symbols for hardware registers are ALL_CAPS
;	- Related symbols start with the same prefix (so they sort together)
;	- hexadecimal constants are lowercase ($eaf00d).
;
;	- Include but comment out instructions that help readability but
;		don't do anything (e.g. redundant CLC on 6502 when the carry is
;		guaranteed already to be clear). The comment symbol should be
;		where the instruction would be, i.e. not on the first column.
;		There should be an explanation in a comment.
;	- Use the full instruction mnemonic when a shortcut would potentially
;		cause confusion. E.g. use movea instead of move on 680x0 when
;		the code relies on the flags not getting modified.

	.68000
	.text

	pea.l	SupEntr
	move.w	#38, -(sp)
	trap	#14
	addq.w	#6, sp

	move.w	#0, -(sp)
	trap	#1

SupEntr:
	move.w	#$2700, sr

	move.b	#0, $fffffa07.w
	move.b	#0, $fffffa09.w

	move.l	#VBL_Handler, $70.w

	stop	#$2300

	move.b	#2, $ffff820a.w
	move.b	#0, $ffff8260.w

	move.w	#$700, $ffff8242.w
	move.w	#$007, $ffff8244.w
	move.w	#$007, $ffff8246.w

	move.l	#fb_raw, d0
	add.l	#$ff, d0
	and.l	#$ffffff00, d0

	move.l	d0, fb_front
	add.l	#32000, d0
	move.l	d0, fb_back

	move.l	#vert_buffer, vert_read
	move.l	#VertFont, vert_font_read
	move.l	#VertFont + 2, vert_char_end
	move.l	#VertText, vert_text_read

	move.l	#HorizText, horiz_text_read
	move.l	#horiz_buffer, horiz_read
	move.l	#horiz_buffer, horiz_previous_read
	move.l	#HorizFont, horiz_font_read
	move.l	#HorizFont + 2, horiz_char_end

	move.l	#BigLogo, a0
	move.l	#logo_shifted, a1

	move.w	#639, d0
CopyLogo:
	movem.w	(a0)+, d4-d7
	move.w	d4, d3
	or.w	d5, d3
	or.w	d6, d3
	or.w	d7, d3
	not.w	d3
	move.w	d3, (a1)+
	move.w	d3, (a1)+
	move.w	d4, (a1)+
	move.w	d5, (a1)+
	move.w	d6, (a1)+
	move.w	d7, (a1)+
	dbra	d0, CopyLogo

	move.l	#logo_shifted, a0
	move.l	#logo_shifted + 96 * 80, a1
	moveq.l	#14, d0
LogoPixel:
	moveq.l	#79, d1
ShiftLine:
	moveq.l	#5, d2
ShiftBitPlane:
	cmp.w	#4, d2
	sge	d3
	and.w	#16, d3
	move.w	d3, ccr
	moveq.l	#7, d3
Shift16pix:
	move.w	(a0), d4
	roxr.w	d4
	move.w	d4, (a1)
	adda.w	#12, a0
	adda.w	#12, a1
	dbra.w	d3, Shift16pix
	sub.w	#94, a0
	sub.w	#94, a1
	dbra	d2, ShiftBitPlane
	add.w	#84, a0
	add.w	#84, a1
	dbra	d1, ShiftLine
	dbra	d0, LogoPixel

	move.l	fb_front, logo_address_front
	move.l	fb_back, logo_address_back

; #############################################################################
; #############################################################################
; ###                                                                       ###
; ###                                                                       ###
; ###                               Main Loop                               ###
; ###                                                                       ###
; ###                                                                       ###
; #############################################################################
; #############################################################################

MainLoop:

; *************************
; **                     **
; ** Wait for next VSync **
; **                     **
; *************************

	stop	#$2300

; ***********************
; **                   **
; ** Swap framebuffers **
; **                   **
; ***********************

	move.l	fb_front, d0
	move.l	fb_back, fb_front
	move.l	d0, fb_back
	lsr.l	#8, d0
	move.b	d0, $ffff8203.w
	lsr.l	#8, d0
	move.b	d0, $ffff8201.w

	move.l	logo_address_front, a0

	moveq.l	#0, d4
	move.l	d4, d5
	move.l	d4, d6
	move.l	d4, d7
	move.l	d4, a3
	move.l	d4, a4
	move.l	d4, a5
	move.l	d4, a6

	moveq.l	#79, d0
EraseLogo:
	movem.l	d4-d7/a3-a6, (a0)
	movem.l	d4-d7/a3-a6, 32(a0)
	add	#160, a0
	dbra d0, EraseLogo

	move.w	#$744, $ffff8240.w
	divu	#1, d0
	divu	#1, d0
	divu	#1, d0
	divu	#1, d0
	move.w	#$000, $ffff8240.w


; ############################
; ############################
; ###                      ###
; ###  Vertical scrollers  ###
; ###                      ###
; ############################
; ############################

; *************************
; **                     **
; ** Draw to framebuffer **
; **                     **
; *************************

	move.l	fb_back, a0
	move.l	vert_read, a1
	moveq.l	#19,d1
DrawVert:
	.rept	10
	move.w	(a1)+, d0
	move.w	d0, 8(a0)
	move.w	d0, 24(a0)
	move.w	d0, 40(a0)
	move.w	d0, 112(a0)
	move.w	d0, 128(a0)
	move.w	d0, 144(a0)
	add.w	#160, a0
	.endr
	dbra	d1, DrawVert

; *********************
; **                 **
; ** Insert new data **
; **                 **
; *********************

	move.l	vert_read, a0
	move.l	vert_font_read, a1
	move.w	(a1)+, d0
	cmp.l	vert_char_end, a1
	bne.s	InChar

	move.l	vert_text_read, a2
	moveq.l	#0, d1
	move.b	(a2)+, d1
	sub.b	#32, d1
	cmp.l	#EndVertText, a2
	bne.s	InText
	move.l	#VertText, a2
InText:
	move.l	a2, vert_text_read

	move.l	#VertFont, a1
	lsl.w	#5, d1
	add.w	d1, a1
	lea.l	32(a1), a2
	move.l	a2, vert_char_end
InChar:
	move.l	a1, vert_font_read
	move.w	d0, (a0)
	move.w	d0, 400(a0)
	addq.w	#2, a0
	cmp.l	#vert_buffer + 400, a0
	bne.s	BufferOk
	move.l	#vert_buffer, a0
BufferOk:
	move.l	a0, vert_read

	move.w	#$474, $ffff8240.w
	divu	#1, d0
	divu	#1, d0
	divu	#1, d0
	divu	#1, d0
	move.w	#$000, $ffff8240.w


; #############################
; #############################
; ###                       ###
; ###  Horizontal scroller  ###
; ###                       ###
; #############################
; #############################

; *********************
; **                 **
; ** Insert new data **
; **                 **
; *********************

	move.l	horiz_read, a0
	move.l	horiz_font_read, a1
	move.w	(a1)+, d0
	cmp.l	horiz_char_end, a1
	bne.s	HInChar

	move.l	horiz_text_read, a2
	moveq.l	#0,d1
	move.b	(a2)+, d1
	cmp.l	#EndHorizText, a2
	bne.s	HInText
	move.l	#HorizText, a2
HInText:
	move.l	a2, horiz_text_read

	move.l	#HorizChars, a2
	sub.b	#32, d1
	lsl.w	#2, d1
	add.w	d1, a2
	move.l	(a2)+, a1
	move.l	(a2)+, horiz_char_end
HInChar:
	move.l	a1, horiz_font_read

	lsr.w	d0
	scs	d1
	move.b	d1, (a0)
	move.b	d1, 40(a0)
	lsr.w	d0
	scs	d1
	move.b	d1, 80(a0)
	move.b	d1, 120(a0)
	lsr.w	d0
	scs	d1
	move.b	d1, 160(a0)
	move.b	d1, 200(a0)
	lsr.w	d0
	scs	d1
	move.b	d1, 240(a0)
	move.b	d1, 280(a0)
	lsr.w	d0
	scs	d1
	move.b	d1, 320(a0)
	move.b	d1, 360(a0)
	lsr.w	d0
	scs	d1
	move.b	d1, 400(a0)
	move.b	d1, 440(a0)
	lsr.w	d0
	scs	d1
	move.b	d1, 480(a0)
	move.b	d1, 520(a0)
	lsr.w	d0
	scs	d1
	move.b	d1, 560(a0)
	move.b	d1, 600(a0)
	lsr.w	d0
	scs	d1
	move.b	d1, 640(a0)
	move.b	d1, 680(a0)

	addq.l	#1, a0
	cmp.l	#horiz_buffer + 40, a0
	bne.s	HInBuffer
	move.l	#horiz_buffer, a0
HInBuffer:
	move.l	a0, horiz_read

; *************************
; **                     **
; ** Draw to framebuffer **
; **                     **
; *************************

	move.l	fb_back, a0
	add.w	#120 * 160 + 2, a0
	move.l	horiz_read, d0
	.if 0
	and.w	#$fffe, d0
	.endif
	move.l	d0, a1
	move.w	#8, d0
Text0:
	move.w	#19, d1
Text1:
	.if 1

	move.b	(a1)+, d2
	move.b	d2, (a0)
	move.b	d2, 160(a0)
	move.b	d2, 320(a0)
	move.b	d2, 480(a0)
	move.b	d2, 640(a0)
	move.b	d2, 800(a0)
	move.b	d2, 960(a0)
	move.b	d2, 1120(a0)
	move.b	(a1)+, d2
	move.b	d2, 1(a0)
	move.b	d2, 161(a0)
	move.b	d2, 321(a0)
	move.b	d2, 481(a0)
	move.b	d2, 641(a0)
	move.b	d2, 801(a0)
	move.b	d2, 961(a0)
	move.b	d2, 1121(a0)

	.else

	move.w	(a1)+, d2
	move.w	d2, (a0)
	move.w	d2, 160(a0)
	move.w	d2, 320(a0)
	move.w	d2, 480(a0)
	move.w	d2, 640(a0)
	move.w	d2, 800(a0)
	move.w	d2, 960(a0)
	move.w	d2, 1120(a0)

	.endif

	addq.w	#8, a0
	dbra	d1, Text1
	add.w	#1120, a0
	add.w	#40, a1
	dbra	d0, Text0

	move.w	#$447, $ffff8240.w
	.rept 124
	nop
	.endr
	move.w	#$000, $ffff8240.w



	move.l	fb_back, a0
	move.l	#logo_shifted, a1

	move.w	logo_y, d0
	addq.w	#1, d0
	cmp.w	#120, d0
	bne.s	LogoYOk
	moveq.l	#0, d0
LogoYOk:
	move.w	d0, logo_y
	mulu.w	#160, d0
	add.w	d0, a0

	move.w	logo_x, d1
	addq.w	#1, d1
	cmp.w	#207, d1
	bne.s	LogoXOk
	moveq.l	#0, d1
LogoXOk:
	move.w	d1, logo_x
	move.w	d1, d0
	and.w	#$f0, d0
	lsr.w	d0
	add.w	d0, a0
	and.w	#$0f, d1
	mulu.w	#96 * 80, d1
	add.l	d1, a1

	move.l	logo_address_back, logo_address_front
	move.l	a0, logo_address_back

	moveq.l	#79, d0
Lp0:
	.rept 8
	movem.l	(a1)+, d5-d7
	and.l	d5, (a0)
	or.l	d6, (a0)+
	move.l	d7, (a0)+
	.endr
	add.w	#96, a0
	dbra	d0, Lp0

	move.w	#$777, $ffff8240.w
	divu	#1, d0
	divu	#1, d0
	divu	#1, d0
	divu	#1, d0
	move.w	#$000, $ffff8240.w

	bra	MainLoop

VBL_Handler:
	rte

	.data

VertFont:
	dc.w	%0000000000000000
	dc.w	%0000000000000000
	dc.w	%0000000000000000
	dc.w	%0000000000000000
	dc.w	%0000000000000000
	dc.w	%0000000000000000
	dc.w	%0000000000000000
	dc.w	%0000000000000000
	dc.w	%0000000000000000
	dc.w	%0000000000000000
	dc.w	%0000000000000000
	dc.w	%0000000000000000
	dc.w	%0000000000000000
	dc.w	%0000000000000000
	dc.w	%0000000000000000
	dc.w	%0000000000000000

	dc.w	%0000001111000000
	dc.w	%0000001111000000
	dc.w	%0000001111000000
	dc.w	%0000001111000000
	dc.w	%0000001111000000
	dc.w	%0000001111000000
	dc.w	%0000001111000000
	dc.w	%0000001111000000
	dc.w	%0000001111000000
	dc.w	%0000000000000000
	dc.w	%0000000000000000
	dc.w	%0000001111000000
	dc.w	%0000001111000000
	dc.w	%0000001111000000
	dc.w	%0000000000000000
	dc.w	%0000000000000000

VertText:
	dc.b	'! ! !   !!! !!! !!!   ! ! !      '
EndVertText:

	.include "mb24.hfont.st.rmac"

HorizText:
	dc.b	"I'M JBQ (JEAN-BAPTISTE) \"DJAYBEE\", "
	dc.b	"FROM THE MEGABUSTERS. REMEMBER US? YOU'D BETTER! "
	dc.b	"MEGABUSTERS: TOP DEMO CREW IN CHAUFFAYER!!!  "
	dc.b	"JBQUERU@GMAIL.COM HTTPS://GITHUB.COM/JBQUERU    "
	dc.b	"THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG       "
	dc.b	" !\"'(),-./0123456789:?@ABCDEFGHIJKLMNOPQRSTUVWXYZ "
EndHorizText:

	.even

BigLogo:
	.rept 8
	dc.w	0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,0,0,0,0
	dc.w	1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,0,0,0,0
	dc.w	2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,0,0,0,0
	dc.w	3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,0,0,0,0
	dc.w	4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,0,0,0,0
	dc.w	5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,0,0,0,0
	dc.w	6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,0,0,0,0
	dc.w	7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,0,0,0,0
	dc.w	8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,0,0,0,0
	dc.w	9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,0,0,0,0
	.endr

	.bss

	.even
fb_front:
	.ds.l	1
fb_back:
	.ds.l	1

vert_read:
	ds.l	1

vert_buffer:
	ds.w	2 * 200

vert_font_read:
	ds.l	1
vert_char_end:
	ds.l	1

vert_text_read:
	ds.l	1

horiz_buffer:
	ds.w	40 * 9 * 2

horiz_read:
	ds.l	1
horiz_previous_read:
	ds.l	1

horiz_font_read:
	ds.l	1
horiz_char_end:
	ds.l	1

horiz_text_read:
	ds.l	1

logo_shifted:
	ds.l	3 * 8 * 80 * 16

logo_x:
	ds.w	1
logo_y:
	ds.w	1
logo_address_front:
	ds.l	1
logo_address_back:
	ds.l	1

fb_raw:
	.ds.b	64255

	.end
